{"version":3,"sources":["Components/Navbar/Navbar.js","Components/TextError.js","Components/Input.js","Components/Textarea.js","Components/Datepicker.js","Components/FormikControl.js","Components/HrPage.js","App.js","serviceWorker.js","index.js"],"names":["NavWrapper","styled","nav","Navbar","Fragment","className","TextError","props","children","Input","label","name","rest","htmlFor","id","component","Textarea","as","Datepicker","form","field","setFieldValue","value","selected","onChange","val","FormikControl","control","DivWrapper","Styled","div","HrPage","useState","result","setResult","show","setShow","validationSchema","Yup","fullname","required","address","contactNo","email","companyName","companyAddress","companyContactNo","jobTittle","jobRole","dateFrom","displayResult","initialValues","dateTo","onSubmit","values","console","log","formik","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.517822ca.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nfunction Navbar() {\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <NavWrapper className=\"navbar bg-dark text-white\">\r\n                <h3 className='text-centre mx-auto'>HR CONSULT LIMITED</h3>\r\n                \r\n            </NavWrapper>\r\n        </React.Fragment>\r\n    )\r\n}\r\nconst NavWrapper = styled.nav`\r\nbackground: #030226 !important ;\r\n`;\r\n\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nfunction TextError(props) {\r\n    return (\r\n        <div className=\"text-danger\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TextError;\r\n","import React from 'react';\r\nimport {Field, ErrorMessage} from 'formik';\r\nimport TextError from './TextError';\r\n\r\n\r\nconst Input = (props) => {\r\n    const {label, name, ...rest} = props;\r\n    return (\r\n        <React.Fragment>\r\n        <div className= 'form-group'>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field \r\n                name={name} \r\n                id={name} \r\n                {...rest}  \r\n                className='form-control' />\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport {Field, ErrorMessage} from 'formik';\r\nimport TextError from './TextError';\r\n\r\n\r\nfunction Textarea(props) {\r\n    const {label,name, ...rest} = props;\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field \r\n                as='textarea' \r\n                name={name} \r\n                id={name} \r\n                {...rest} \r\n                className='form-control' />\r\n            <ErrorMessage name={name} component={TextError} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Textarea;\r\n","import React from 'react';\r\nimport DateView from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { Field, ErrorMessage} from 'formik';\r\nimport TextError from './TextError';\r\n\r\n\r\nfunction Datepicker(props) {\r\n    const {label, name, ...rest} = props;\r\n    const CustomInputComponent = ({form, field}) => {\r\n        const {setFieldValue} = form;\r\n        const {value} = field;\r\n        return <DateView id={name} {...field} {...rest} selected={value} onChange= {\r\n            val => setFieldValue(name,val)} />\r\n        }\r\n    return (\r\n        <React.Fragment>\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n           <Field name={name} component={CustomInputComponent} />\r\n           \r\n                    \r\n            \r\n            <ErrorMessage name={name} component={TextError} />\r\n            \r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Datepicker;\r\n\r\n\r\n","import React from 'react';\r\nimport Input from './Input';\r\nimport Textarea from './Textarea';\r\nimport DatePicker from './Datepicker';\r\n\r\nfunction FormikControl(props) {\r\n    const {control, ...rest} = props;\r\n    switch(control) {\r\n        case 'input' : return <Input {...rest} />;\r\n        case 'textarea' : return <Textarea {...rest} />;\r\n        case 'date' : return <DatePicker {...rest} />;\r\n        default:\r\n            return null;\r\n    }\r\n    \r\n}\r\n\r\nexport default FormikControl;\r\n","import React, {useState} from 'react';\r\nimport {Formik , Form} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport FormikControl from './FormikControl';\r\nimport Styled from 'styled-components';\r\n\r\nconst HrPage = ()  => {\r\n    const [result, setResult] = useState([]);\r\n    const [show, setShow] = useState(false);\r\n    \r\n    const initialValues = {\r\n        fullname : '',\r\n        address : '',\r\n        contactNo : '',\r\n        email : '',\r\n        companyName : '',\r\n        companyAddress : '',\r\n        companyContactNo : '',\r\n        jobTittle : '',\r\n        jobRole : '',\r\n        dateFrom: null,\r\n        dateTo: null,\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        fullname : Yup.string().required('Required'),\r\n        address : Yup.string().required('Required'),\r\n        contactNo : Yup.string().required('Required'),\r\n        email: Yup.string().email('Invalid Email').required('Required'),\r\n        companyName : Yup.string().required('Required'),\r\n        companyAddress : Yup.string().required('Required'),\r\n        companyContactNo : Yup.string().required('Required'),\r\n        jobTittle : Yup.string().required('Required'),\r\n        jobRole : Yup.string().required('Required'),\r\n        dateFrom : Yup.string().required('Required')\r\n\r\n    })\r\n\r\n    const onSubmit = values => {\r\n  \r\n        setResult(values);\r\n        setShow(true);\r\n        console.log(result.email);\r\n    }\r\n    const displayResult = (<div>\r\n    <h3>{result.email}</h3>\r\n    <h3>Work Experience</h3>\r\n    <hr />\r\n    <div className='d-flex text-center'>\r\n        <div className='col-4'> Employer Name</div>\r\n        <div className='col-6'>{result.companyName}</div>\r\n\r\n    </div>\r\n    <div className='d-flex text-center'>\r\n        <div className='col-4'>Employer Address</div>\r\n        <div className='col-6'><p> {result.companyAddress}</p></div>\r\n\r\n    </div>\r\n    <div className='d-flex text-center'>\r\n        <div className='col-4'>Employer phone number</div>\r\n        <div className='col-6'>{result.companyContactNo}</div>\r\n\r\n    </div>\r\n    <div className='d-flex text-center'>\r\n        <div className='col-4'>Job Title</div>\r\n        <div className='col-6'>{result.jobTittle}</div>\r\n\r\n    </div>\r\n    <div className='d-flex text-center'>\r\n        <div className='col-4'>Job Role</div>\r\n        <div className='col-6'>{result.jobRole}</div>\r\n\r\n    </div>\r\n    \r\n</div>)\r\n\r\n    return (\r\n        <div className=\"container \">\r\n            <div className='row'>\r\n                <div className=' text-centre mx-auto my-5  '>\r\n                    <h2>Job Registration Portal</h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"row \">\r\n            <div className=\"col-md-6  col-sm-8 mx-auto my-2 \"> \r\n        <DivWrapper className='card'> \r\n        <div className='card-body'> \r\n        <Formik\r\n        initialValues = {initialValues} \r\n        validationSchema = {validationSchema}\r\n        onSubmit = {onSubmit} >\r\n        { formik => {\r\n            return <Form>\r\n                <FormikControl \r\n                    control='input'\r\n                    type = 'input'\r\n                    label = 'Fullname'\r\n                    name = 'fullname'\r\n                    />\r\n\r\n                <FormikControl \r\n                    control='textarea'\r\n                    label = 'Address'\r\n                    name = 'address'\r\n                    />\r\n\r\n                <FormikControl \r\n                    control='input'\r\n                    type = 'input'\r\n                    label = 'Phone Number'\r\n                    name = 'contactNo'\r\n                    />\r\n\r\n                <FormikControl \r\n                    control='input'\r\n                    type = 'email'\r\n                    label = 'Email Address'\r\n                    name = 'email'\r\n                    />\r\n\r\n            <input type='file' className='form-control-file' name='file' />\r\n            <div><h3>Work Experience</h3></div>\r\n\r\n                <FormikControl \r\n                    control='input'\r\n                    type = 'input'\r\n                    label = 'Company Name'\r\n                    name = 'companyName'\r\n                    />\r\n\r\n                <FormikControl \r\n                    control='input'\r\n                    type = 'input'\r\n                    label = 'Company Address'\r\n                    name = 'companyAddress'\r\n                    />\r\n\r\n                <FormikControl \r\n                    control='input'\r\n                    type = 'input'\r\n                    label = 'Company Contact Number'\r\n                    name = 'companyContactNo'\r\n                    />\r\n\r\n                <FormikControl \r\n                    control='input'\r\n                    type = 'input'\r\n                    label = 'Job Tittle'\r\n                    name = 'jobTittle'\r\n                    />\r\n\r\n                <FormikControl \r\n                    control='textarea'\r\n                    label = 'Job Role'\r\n                    name = 'jobRole'\r\n                    />\r\n\r\n                <FormikControl \r\n                    control='date'\r\n                    label = 'Date: From'\r\n                    name = 'dateFrom'\r\n                    />\r\n\r\n                <FormikControl \r\n                    control='date'\r\n                    label = 'Date: To'\r\n                    name = 'dateTo'\r\n                    />\r\n\r\n                <button type='submit'  >\r\n                    Submit\r\n                </button>\r\n            </Form>\r\n\r\n        }  }\r\n\r\n        </Formik>\r\n        </div>\r\n        </DivWrapper> \r\n        </div>\r\n        </div>\r\n        <div className='col-md-6 mx-auto card'>\r\n            <div className=' card-body'>\r\n            { show && displayResult}\r\n                </div>  </div>\r\n        \r\n        </div>\r\n        \r\n        \r\n    )\r\n\r\n  \r\n    \r\n}\r\nconst DivWrapper = Styled.div`\r\nbox-shadow: 10px 10px 8px 10px #888888;\r\npadding: 0.5rem;\r\n`;\r\n\r\nexport default HrPage;\r\n","import React from 'react';\n\nimport Navbar from './Components/Navbar/Navbar';\nimport HrPage from './Components/HrPage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <React.Fragment>\n     <Navbar />\n      <HrPage />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}